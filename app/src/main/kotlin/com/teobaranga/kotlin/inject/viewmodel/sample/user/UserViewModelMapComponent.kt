package com.teobaranga.kotlin.inject.viewmodel.sample.user

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import com.teobaranga.kotlin.inject.viewmodel.runtime.ContributesViewModel
import com.teobaranga.kotlin.inject.viewmodel.sample.SavedStateViewModelMap
import com.teobaranga.kotlin.inject.viewmodel.sample.ViewModelFactoryMap
import com.teobaranga.kotlin.inject.viewmodel.sample.ViewModelMap
import me.tatarka.inject.annotations.Provides
import software.amazon.lastmile.kotlin.inject.anvil.ContributesTo
import software.amazon.lastmile.kotlin.inject.anvil.ForScope
import software.amazon.lastmile.kotlin.inject.anvil.SingleIn
import kotlin.reflect.KClass

/**
 * Only used for testing in order to expose the 3 ViewModel maps generated by [ContributesViewModel] when
 * applied to various kinds of ViewModels.
 */
@ContributesTo(UserScope::class)
@SingleIn(UserScope::class)
interface UserViewModelMapComponent {

    /**
     * Map of simple ViewModel factories for ViewModels that have no assisted dependencies.
     */
    @ForScope(UserScope::class)
    val viewModelMap: ViewModelMap

    /**
     * Map of ViewModel factories that just require a [SavedStateHandle].
     */
    @ForScope(UserScope::class)
    val savedStateViewModelMap: SavedStateViewModelMap

    /**
     * Map of advanced ViewModel factories that require one or more assisted dependencies outside of [SavedStateHandle].
     */
    @ForScope(UserScope::class)
    val viewModelFactoryMap: ViewModelFactoryMap

    @Provides
    @SingleIn(UserScope::class)
    @ForScope(UserScope::class)
    fun provideSimpleViewModelMap(
        map: Map<KClass<out ViewModel>, () -> ViewModel>
    ): ViewModelMap = map

    @Provides
    @SingleIn(UserScope::class)
    @ForScope(UserScope::class)
    fun provideSavedStateViewModelMap(
        map: Map<KClass<out ViewModel>, (SavedStateHandle) -> ViewModel>
    ): SavedStateViewModelMap = map

    @Provides
    @SingleIn(UserScope::class)
    @ForScope(UserScope::class)
    fun provideViewModelFactoryMap(
        map: Map<KClass<out ViewModel>, Any>
    ): ViewModelFactoryMap = map
}
